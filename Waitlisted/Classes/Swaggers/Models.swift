// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } 

            // Decoder for [ErrorResponse]
            Decoders.addDecoder(clazz: [ErrorResponse].self) { (source: AnyObject) -> [ErrorResponse] in
                return Decoders.decode(clazz: [ErrorResponse].self, source: source)
            }
            // Decoder for ErrorResponse
            Decoders.addDecoder(clazz: ErrorResponse.self) { (source: AnyObject) -> ErrorResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ErrorResponse()
                instance.errors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["errors"])
                return instance
            }


            // Decoder for [FormResponse]
            Decoders.addDecoder(clazz: [FormResponse].self) { (source: AnyObject) -> [FormResponse] in
                return Decoders.decode(clazz: [FormResponse].self, source: source)
            }
            // Decoder for FormResponse
            Decoders.addDecoder(clazz: FormResponse.self) { (source: AnyObject) -> FormResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FormResponse()
                instance.question = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["question"])
                return instance
            }


            // Decoder for [Reservation]
            Decoders.addDecoder(clazz: [Reservation].self) { (source: AnyObject) -> [Reservation] in
                return Decoders.decode(clazz: [Reservation].self, source: source)
            }
            // Decoder for Reservation
            Decoders.addDecoder(clazz: Reservation.self) { (source: AnyObject) -> Reservation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Reservation()
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.affiliate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["affiliate"])
                instance.responses = Decoders.decodeOptional(clazz: FormResponse.self, source: sourceDictionary["responses"])
                return instance
            }


            // Decoder for [ReservationRequest]
            Decoders.addDecoder(clazz: [ReservationRequest].self) { (source: AnyObject) -> [ReservationRequest] in
                return Decoders.decode(clazz: [ReservationRequest].self, source: source)
            }
            // Decoder for ReservationRequest
            Decoders.addDecoder(clazz: ReservationRequest.self) { (source: AnyObject) -> ReservationRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ReservationRequest()
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                return instance
            }


            // Decoder for [ReservationsResponse]
            Decoders.addDecoder(clazz: [ReservationsResponse].self) { (source: AnyObject) -> [ReservationsResponse] in
                return Decoders.decode(clazz: [ReservationsResponse].self, source: source)
            }
            // Decoder for ReservationsResponse
            Decoders.addDecoder(clazz: ReservationsResponse.self) { (source: AnyObject) -> ReservationsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ReservationsResponse()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.uuid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uuid"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.affiliate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["affiliate"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.referredCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["referred_count"])
                instance.position = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["position"])
                instance.totalCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_count"])
                instance.activatedAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["activated_at"])
                instance.createdAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["created_at"])
                return instance
            }


            // Decoder for [SiteResponse]
            Decoders.addDecoder(clazz: [SiteResponse].self) { (source: AnyObject) -> [SiteResponse] in
                return Decoders.decode(clazz: [SiteResponse].self, source: source)
            }
            // Decoder for SiteResponse
            Decoders.addDecoder(clazz: SiteResponse.self) { (source: AnyObject) -> SiteResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SiteResponse()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.brandColor = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["brand_color"])
                instance.buttonTextColor = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["button_text_color"])
                instance.customStyles = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["custom_styles"])
                instance.askName = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ask_name"])
                instance.signupTitle = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["signup_title"])
                instance.signupCopy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["signup_copy"])
                instance.positionTitle = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["position_title"])
                instance.socialCopy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["social_copy"])
                instance.socialMessage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["social_message"])
                instance.domain = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["domain"])
                instance.shareSocialCopy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["share_social_copy"])
                instance.referralCopy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["referral_copy"])
                instance.checkPositionCopy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["check_position_copy"])
                instance.joinButtonCopy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["join_button_copy"])
                instance.checkReservationCopy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["check_reservation_copy"])
                instance.emailFieldLabel = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email_field_label"])
                instance.nameFieldLabel = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name_field_label"])
                instance.thankYouShareTemplate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["thank_you_share_template"])
                instance.waitlistThreshold = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["waitlist_threshold"])
                instance.useCustomThankYou = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["use_custom_thank_you"])
                instance.hideWaitlist = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hide_waitlist"])
                instance.unmetSharedTemplate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unmet_shared_template"])
                instance.thresholdMet = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["threshold_met"])
                instance.websiteUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["website_url"])
                instance.trackingCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tracking_code"])
                instance.customCss = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["custom_css"])
                instance.hideBranding = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hide_branding"])
                instance.totalCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_count"])
                return instance
            }
        }
    }
}
